name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

env:
  BRANCH_NAME: claude/issue-${{ github.event.issue.number }}-${{ github.run_id }}

jobs:
  # Step 1: Write tests first
  write-tests:
    name: "Step 1: Write Tests"
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Write tests (without implementation)
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          custom_instructions: |
            IMPORTANT - TDD RED PHASE: 
            1. Create branch using EXACT name: ${{ env.BRANCH_NAME }}
            2. Use command: git checkout -b ${{ env.BRANCH_NAME }}
            3. Write ONLY test files - NO implementation files whatsoever
            4. Do NOT create any source/implementation files (no .js/.py/.go files in src/ folder)
            5. Do NOT create placeholder classes or functions
            6. Tests should be comprehensive and cover all requirements
            7. Tests should reference non-existent functions/classes (they will be created in Step 2)
            8. Focus on edge cases, error handling, and full test coverage
            9. Commit ONLY the test files and package configuration to the branch
            10. Tests MUST fail when run (red phase of TDD)
          additional_permissions: |
            actions: read

  # Step 2: Write implementation
  write-implementation:
    name: "Step 2: Write Implementation"
    needs: write-tests
    if: always() && needs.write-tests.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Write implementation to pass tests
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          custom_instructions: |
            IMPORTANT - TDD GREEN PHASE:
            1. Switch to existing branch using EXACT name: ${{ env.BRANCH_NAME }}
            2. Use command: git checkout ${{ env.BRANCH_NAME }}
            3. Run tests first to confirm they are failing (red phase)
            4. Write ONLY the minimal implementation to make tests pass
            5. Do NOT modify any test files
            6. Create only the necessary source/implementation files
            7. Implement functions/classes exactly as referenced in the tests
            8. Use minimal code - implement only what's needed to pass tests
            9. Run tests after implementation to confirm they pass (green phase)
            10. Commit the implementation files to the SAME branch: ${{ env.BRANCH_NAME }}
            11. Include meaningful commit message describing the implementation
          additional_permissions: |
            actions: read

  # Step 3: Verify tests pass
  verify-tests:
    name: "Step 3: Verify Tests"
    needs: [write-tests, write-implementation]
    if: always() && needs.write-implementation.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run and verify all tests
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          custom_instructions: |
            IMPORTANT - TDD REFACTOR PHASE:
            1. Switch to existing branch using EXACT name: ${{ env.BRANCH_NAME }}
            2. Use command: git checkout ${{ env.BRANCH_NAME }}
            3. Run all tests to verify current state
            4. If tests are failing, analyze and fix the implementation (NOT the tests)
            5. Refactor code for better quality while keeping tests passing
            6. Ensure 100% test coverage and all tests pass
            7. Run any additional quality checks (linting, type checking if configured)
            8. Commit any refactoring/fixes to the SAME branch: ${{ env.BRANCH_NAME }}
            9. Create a Pull Request from ${{ env.BRANCH_NAME }} to main branch when all tests pass
            10. Include comprehensive PR description with TDD cycle summary
            11. Tag the original issue #${{ github.event.issue.number }} in the PR description
          allowed_tools: "Bash(npm test),Bash(npm run test:*),Bash(jest),Bash(pytest),Bash(go test),Bash(cargo test)"
          additional_permissions: |
            actions: read